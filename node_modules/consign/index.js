function findMatches() {
	var matches, candidates = ['matchesSelector', 'mozMatchesSelector',
    'webkitMatchesSelector', 'oMatchesSelector',
    'msMatchesSelector'];
    for (var i = 0, l = candidates.length; i < l; i++) {
    	var candidate = candidates[i];
    	if (candidate in document.documentElement) {
    		matches = candidate;
    		break;
    	}
    }
    return matches;
};

var matchesSelector = findMatches();

function contains(parent, element) {
	if (element.parentNode) {
		if (element.parentNode === parent) {
			return true
		} else {
			return contains(parent, element.parentNode);
		}
	} else {
		return false;
	}
};

function consign(parent, evnt, selector, fn, ctx) {
	parent.addEventListener(evnt, function(event) {
		var element = function find(el) {
			if (el) {
				if (el[matchesSelector] && el[matchesSelector](selector)) {
					if (contains(parent, el)) {
						return el;
					} else {
						return false;
					}
				}

				if (el.parentNode && el.parentNode !== parent) {
					return find(el.parentNode);
				} else {
					return false;
				}
			} else {
				return false;
			}
		}(event.target);

		if (element) {
			ctx = ctx || element;
			fn.apply(ctx, arguments);
		}
	}, false);
};

module.exports = consign;